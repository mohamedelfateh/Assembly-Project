bits 16
org 0x7C00
cli 
mov ah,2
mov al,6
mov dl,0x80
mov ch,0
mov dh,0
mov cl,2
mov bx,begin
int 0x13
jmp begin



;dh row
;dl column
;ah 2
;bh page number
;int 0x10

times (510 - ($ - $$)) db 0
db 0x55, 0xAA
begin:  
     
	cli
	xor ax,ax
	mov ds,ax
	mov ss,ax
	mov edi, 0xB8000;
        mov esi,ScanCodeTableshift
        mov ecx,ScanCodeTableCAPS
        mov ebx,ScanCodeTable
        
L:
        in al,0x64; 0000000X
        and al,0x01
        jz L
        in al,0x60
        cmp al,0x80
        ja L 
        cmp al, 0x3A
        je c
        cmp al,0x2A
        je ls
        cmp al,0x36
        je rs
        cmp al , 0x1C
        je e
        cmp al,0x50
        je down
        cmp al ,0x4B
        je left
        cmp al ,0x48
        je up
        cmp al , 0x4D
        je right
        cmp al ,0x0E
        je back
        cmp al,0x53
        je del 
        cmp al,0x47
        je home
        cmp al,0x0F
        je tab
        cmp al,0x4F
        je end
        cmp al,0x3c;f2
        je savepage1
        
        cmp al,0x3b;f1
        je savepage2
        
        
       
              
i:
       mov ecx,edi
        add edi,2
       
        mov edi,0xB9F3E
h:      sub edi,2
        mov dl,[edi]
        mov [edi+2],dl
     
        cmp edi ,ecx
        
        jne h
      
        mov byte[edi+1],0xf
        xlat
        mov [edi],al
        add edi,2
        mov byte[edi+1],4
        
        jmp L
c:
        xchg ebx,ecx
       
        jmp L
ls:
   
        in  al,0x64
        test    al,1
        jz      ls
        
        in  al,0x60
        cmp al,0xAA
        je L
        
        cmp al,0x2A
        je ls
        
        cmp al , 0x80
        ja ls
    
        xchg ebx,esi
        
;        mov ecx,edi
;        mov edi,0x8F8E
;u:      mov dl,[edi]
;        mov [edi+2],dl
;        cmp edi ,ecx
;        sub edi,2
;        jne u
;        
        mov byte[edi+1],0xf
        xlat
        mov [edi],al
        add edi,2
        mov byte[edi+1],4
        xchg ebx,esi
        jmp ls
        
rs:
   
        in  al,0x64
        test    al,1
        jz      rs
        
        in  al,0x60
        cmp al,0xB6
        je L
        
        cmp al,0x36
        je rs
        
        cmp al , 0x80
        ja rs
    
        xchg ebx,esi
        xlat
        mov [edi],al
        add edi,2
        xchg ebx,esi
        jmp rs
e:      push eax
push ebp
push edx
        mov eax,edi
        sub eax , 0xB8000
        
        mov ebp , 160
        xor edx,edx
        div ebp 
        sub edx,160
        neg edx
        mov ebp,edi
        mov edi,0xB8F9E
        sub edi,edx

       rec2:
       mov al,[edi]
       mov [edi+1*edx],al
       mov al,0
       mov [edi],al
       sub edi,2
       cmp edi,ebp
       jae rec2
       add edi,edx
       add edi,2
       pop edx
       pop ebp
       pop eax
       jmp L

down:   mov byte[edi+1],0xf
        add edi,160
        mov byte[edi+1],4
        jmp L

left:   mov byte[edi+1],0xf
        sub edi , 2
        mov byte[edi+1],4
        jmp L

up:     mov byte[edi+1],0xf
        sub edi, 160
        mov byte[edi+1],4
        jmp L

right:  mov byte[edi+1],0xf
        add edi , 2
        mov byte[edi+1],4
        jmp L

back:   
        sub edi,2
        mov dl,0
        mov [edi],bl
        mov ebp,edi
r:      mov dl ,[edi+2]
        mov [edi],dl
        
        add edi,2
        cmp edi,0xB8F9E
        jb r
        mov edi,ebp
        jmp L
del:
        ;add edi,2
        mov dl,0
        mov [edi],dl
        mov ebp,edi
d1:     mov dl ,[edi+2]
        mov [edi],dl
        
        add edi,2
        cmp edi,0xB8F9E
        jb d1
        mov edi,ebp
        jmp L
home:   push ebp
        push edx
        xor edx,edx
        mov eax,edi
        sub eax,0xB8000
        mov ebp,160      
        div ebp
        mov eax,edx
        ;mul dword[two]
        sub edi,edx
        pop edx
        pop ebp                                                 
        jmp L 
tab:
       push ebp
       push eax
       mov ebp,edi
       sub ebp,2
       mov edi,0xB8160
       sub edi,8
       rec:
       mov al,[edi]
       mov [edi+8],al
       mov al,0
       mov [edi],al
       sub edi,2
       cmp edi,ebp
       ja rec
       add edi,8
       pop eax
       pop ebp
       jmp L 
end:push ebp
        push edx
        xor edx,edx
        mov eax,edi
        sub eax,0xB8000
        mov ebp,160      
        div ebp
        sub edx,160
        neg edx
        add edi,edx
        sub edi,2
        pop edx
        pop ebp                                                
        jmp L
savepage1:
push eax
push ecx

mov ebp,edi
xor ecx,ecx
mov edi,0xb8000
rec3:mov al,[edi]
mov [p1+4*ecx],al
add edi,2
inc ecx
cmp edi,0xb9f40
jb rec3

pop ecx
pop eax
mov edi,0xb8000
jmp rebackpage2
rebackpage1:
push eax
push ecx
mov edi,0xb8000
xor ecx,ecx
rec4:mov ah,[p1+4*ecx]
mov [edi],ah
add edi,2
inc ecx
cmp edi,0xb9f40
jna rec4
mov edi,0xb8000
pop ecx
pop eax
jmp L

savepage2:
push eax
mov eax,[p2]
cmp eax,0
je L

push ecx
push ebp
mov ebp,edi
xor ecx,ecx
mov edi,0xb8000
rec5:mov al,[edi]
mov [p2+4*ecx],al
mov al,0
mov[edi],al
add edi,2
inc ecx
cmp edi,0xb9f40
jb rec5
mov edi,ebp
pop ecx
pop eax
mov edi,0xb8000
jmp rebackpage1

rebackpage2:
push eax
push ecx
mov edi,0xb8000
xor ecx,ecx
rec6:mov ah,[p2+4*ecx]
mov [edi],ah
add edi,2
inc ecx
cmp edi,0xb9f40
jna rec6
mov edi,0xb8000
pop ecx
pop eax
jmp L






 
        
 
                                                                                           
section .data               
ScanCodeTableCAPS: db "//1234567890-=//QWERTYUIOP[]\/ASDFGHJKL;//'/ZXCVBNM,.//// /"
ScanCodeTableshift: db "/~!@#$%^&*()_+//QWERTYUIOP{}|/ASDFGHJKL:///ZXCVBNM<>?/// /"
ScanCodeTable: db "//1234567890-=//qwertyuiop[]\/asdfghjkl;//'/zxcvbnm,.//// /" 
two: dd 2
p1: times(2000) dd 0
p2: times(2000) dd 0
p3: times(2000) dd 0
c1: dd 0
c2: dd 0
times (0x400000 - 512) db 0

db 	0x63, 0x6F, 0x6E, 0x65, 0x63, 0x74, 0x69, 0x78, 0x00, 0x00, 0x00, 0x02
db	0x00, 0x01, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
db	0x20, 0x72, 0x5D, 0x33, 0x76, 0x62, 0x6F, 0x78, 0x00, 0x05, 0x00, 0x00
db	0x57, 0x69, 0x32, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x78, 0x04, 0x11
db	0x00, 0x00, 0x00, 0x02, 0xFF, 0xFF, 0xE6, 0xB9, 0x49, 0x44, 0x4E, 0x1C
db	0x50, 0xC9, 0xBD, 0x45, 0x83, 0xC5, 0xCE, 0xC1, 0xB7, 0x2A, 0xE0, 0xF2
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00